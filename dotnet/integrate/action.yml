name: Build and test .NET
description: Builds and runs tests on a .NET codebase

inputs:
  dotnet_version:
    description: .NET SDK version to be used
    required: false
    default: '7.0.x'
  sonar_enabled:
    description: Enable code scan by Sonar
    required: false
    default: 'false'
  sonar_organization:
    description: Sonar organization
    required: false
    default: ''
  sonar_host_url:
    description: Sonar host URL
    required: false
    default: ''
  sonar_project_name:
    description: Sonar project name
    required: false
    default: ''
  sonar_project_key:
    description: Sonar project key
    required: false
    default: ''
  sonar_token:
    description: Sonar token for login
    required: false
    default: ''

runs:
  using: "composite"
  steps:
      - name: Install .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{inputs.dotnet_version}}
      - name: Set up JDK 11 for Sonar
        if: ${{ inputs.sonar_enabled == 'true' }}
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Install .NET linters
        if: ${{ inputs.dotnet_version == '7.0.x' }}
        run: dotnet tool install -g dotnet-format --version "7.*" --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json
        shell: bash
      - name: Restore .NET packages
        run: dotnet restore
        shell: bash
      - name: Lint .NET code
        run: dotnet-format --verify-no-changes --severity warn --verbosity:diagnostic
        shell: bash
      - name: Cache SonarCloud packages
        if: ${{ inputs.sonar_enabled == 'true' }}
        uses: actions/cache@v3
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        if: ${{ inputs.sonar_enabled == 'true' }}
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install Sonar scanner
        if: ${{ inputs.sonar_enabled == 'true' && steps.cache-sonar-scanner.outputs.cache-hit != 'true' }}
        run: |
          md ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
        shell: bash
      - name: Start code analysis
        if: ${{ inputs.sonar_enabled == 'true' }}
        run: ./.sonar/scanner/dotnet-sonarscanner begin /k:"${{inputs.sonar_project_key}}" /o:"${{inputs.sonar_organization}}" /n:"${{inputs.sonar_project_name}}" /d:sonar.login="${{inputs.sonar_token}}" /d:sonar.host.url="${{inputs.sonar_host_url}}"
        shell: bash
      - name: Build .NET solution
        run: dotnet build --no-restore
        shell: bash
      - name: Run tests
        run: dotnet test --no-build --verbosity normal
        shell: bash
      - name: Stop code analysis
        if: ${{ inputs.sonar_enabled == 'true' }}
        run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{inputs.sonar_token}}"
        shell: bash
